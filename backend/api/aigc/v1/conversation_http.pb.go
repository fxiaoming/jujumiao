// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v3.21.12
// source: api/aigc/v1/conversation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConversationCreateConversation = "/aigc.v1.Conversation/CreateConversation"

type ConversationHTTPServer interface {
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationReply, error)
}

func RegisterConversationHTTPServer(s *http.Server, srv ConversationHTTPServer) {
	r := s.Route("/")
	r.POST("/api/conversation", _Conversation_CreateConversation0_HTTP_Handler(srv))
}

func _Conversation_CreateConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationCreateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConversation(ctx, req.(*CreateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateConversationReply)
		return ctx.Result(200, reply)
	}
}

type ConversationHTTPClient interface {
	CreateConversation(ctx context.Context, req *CreateConversationRequest, opts ...http.CallOption) (rsp *CreateConversationReply, err error)
}

type ConversationHTTPClientImpl struct {
	cc *http.Client
}

func NewConversationHTTPClient(client *http.Client) ConversationHTTPClient {
	return &ConversationHTTPClientImpl{client}
}

func (c *ConversationHTTPClientImpl) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...http.CallOption) (*CreateConversationReply, error) {
	var out CreateConversationReply
	pattern := "/api/conversation"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationCreateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
