// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"backend/internal/biz"
	"backend/internal/conf"
	"backend/internal/data"
	"backend/internal/server"
	"backend/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/redis/go-redis/v9"
	"go.mongodb.org/mongo-driver/mongo"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, logger log.Logger, client *mongo.Client, redisClient *redis.Client, bootstrap *conf.Bootstrap) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger, client, redisClient)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData)
	conversationRepo := data.NewConversationRepo(dataData)
	conversationUsecase := biz.NewConversationUsecase(userRepo, conversationRepo)
	chatService := service.NewChatService(conversationUsecase, bootstrap)
	conversationService := service.NewConversationService(conversationUsecase)
	userUsecase := biz.NewUserUsecase(userRepo)
	mail := conf.ProvideMail(bootstrap)
	userService := service.NewUserService(userUsecase, dataData, mail)
	grpcServer := server.NewGRPCServer(confServer, chatService, conversationService, userService, logger)
	httpServer := server.NewHTTPServer(confServer, chatService, conversationService, userService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
